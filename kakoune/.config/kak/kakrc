# Plugin manager
#

def plug -params 1 %{
    %sh{
        if [[ ! -d $HOME/.config/kak/build/$1 ]]; then
            (cd $HOME/.config/kak/build; git clone https://github.com/$1 2> /dev/null)
        fi
        for file in $(echo $HOME/.config/kak/build/$(basename $1)/*.kak); do
            echo source "$file"
        done
    }
}

plug occivink/kakoune-vertical-selection
plug occivink/kakoune-interactive-itersel
plug occivink/kakoune-expand
plug occivink/kakoune-find
plug occivink/kakoune-sudo-write
plug danr/kakoune-easymotion

# User preference
# ───────────────

set-option global makecmd 'make -j8'
set-option global grepcmd 'ag --column'
set-option global clang_options -std=c++1y

colorscheme base16-ashes

add-highlighter global show_matching
add-highlighter global dynregex '%reg{/}' 0:+u

hook global WinCreate ^[^*]+$ %{ add-highlighter window number_lines }

# Enable editor config
# ────────────────────

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Filetype specific hooks
# ───────────────────────

hook global WinSetOption filetype=(c|cpp) %{
    clang-enable-autocomplete 
    clang-enable-diagnostics
    alias window lint clang-parse
    alias window lint-next-error clang-diagnostics-next
}

hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    lint-enable
    set-option global lintcmd 'flake8'
}

hook global WinSetOption filetype=javascript %{
    set tabstop 2
    set indentwidth 2
    set-option global lintcmd 'eslint'
}

map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

# Highlight the word under the cursor
# ───────────────────────────────────

declare-option -hidden regex curword
set-face global CurWord default,rgb:4a4a4a

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A\w+\z<ret>
        set-option buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set-option buffer curword ''
    } }
}
add-highlighter global dynregex '%opt{curword}' 0:CurWord

# Custom mappings
# ───────────────

map global normal = ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

# System clipboard handling
# ─────────────────────────

%sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

# Various mappings
# ────────────────

map global normal '#' :comment-line<ret>

map global user -docstring 'next lint error' n ':lint-next-error<ret>'
map global normal <c-p> :lint<ret>

map global user -docstring 'gdb helper mode' g ':gdb-helper<ret>'
map global user -docstring 'gdb helper mode (repeat)' G ':gdb-helper-repeat<ret>'

hook global BufOpenFifo '\*grep\*' %{ map -- global normal - ':grep-next-match<ret>' }
hook global BufOpenFifo '\*make\*' %{ map -- global normal - ':make-next-error<ret>' }

map global normal <c-f> 30j
map global normal <c-b> 30k

# Enable <tab>/<s-tab> for insert completion selection
# ──────────────────────────────────────────────────────

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

# Easy motion
# ───────────

map global user -docstring 'motion forward' w :easy-motion-w<ret>
map global user -docstring 'motion Forward' W :easy-motion-W<ret>
map global user -docstring 'motion down' j :easy-motion-j<ret>
map global user -docstring 'motion backward' b :easy-motion-b<ret>
map global user -docstring 'motion Backward' B :easy-motion-B<ret>
map global user -docstring 'motion up' k :easy-motion-k<ret>

# Helper commands
# ───────────────

define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

define-command ide %{
    rename-client main
    set-option global jumpclient main

    new rename-client tools
    set-option global toolsclient tools

    new rename-client docs
    set-option global docsclient docs
}
